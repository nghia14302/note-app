{"version":3,"sources":["components/Manager/Manager.jsx","components/Editor/Editor.jsx","App.js","reportWebVitals.js","index.js"],"names":["Editor","styled","div","Title","h2","InputForm","Button","button","InputStyle","css","InputTitle","input","InputMessage","textarea","Manager","props","onEditField","key","value","updateNote","note","Date","className","type","title","onChange","e","target","placeholder","content","lastModified","toLocaleString","Sidebar","Navbar","NoteList","ul","ListItem","li","RemoveButton","onClick","createNote","listNote","map","id","activeNote","setActiveNote","removeNote","toString","GlobalStyles","createGlobalStyle","AppContainer","App","newNote","uuid","useState","localStorage","JSON","parse","setListNote","useEffect","setItem","stringify","idToDelete","filter","find","updatedNote","updatedNoteArray","console","log","sort","a","b","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.208723c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\n// styled components\r\nconst Editor = styled.div`\r\n    position: relative;\r\n    background-color: #454545; \r\n    width: 70%;\r\n    height: 90%;\r\n    padding: 2rem;\r\n`;\r\nconst Title  = styled.h2`\r\n    font-family: \"Open sans\", sans-serif;\r\n    font-size: 2.3rem;\r\n    font-weight: 700;\r\n    color: white;\r\n    margin-bottom: 1rem;\r\n`;    \r\nconst InputForm = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    height: 90%;\r\n`;\r\nconst Button = styled.button`\r\n    position: absolute;\r\n    background-color: transparent;\r\n    border: none;\r\n    font-family: \"Open sans\", sans-serif;\r\n    font-weight: 700;\r\n    color: #59B3F7;\r\n    padding: 0.5rem 1rem;\r\n    width: 100px;\r\n    height: 40px;\r\n    cursor: pointer;\r\n    transition-duration: 0.2s;\r\n    bottom: 2rem;\r\n    right: 2rem;\r\n    &:hover {\r\n        transform: translate(-5px);\r\n    }\r\n`;\r\nconst InputStyle = css`\r\n    font-family: \"Open sans\", sans-serif;\r\n    font-size: 1.3rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    padding: 0.5rem 1rem;\r\n    border: none;\r\n    margin-bottom: 1rem;\r\n    outline: none;\r\n\r\n    &:focus,\r\n    &:hover,\r\n    &:active {\r\n        border: 2px solid cyan;\r\n    }\r\n`;\r\nconst InputTitle = styled.input`\r\n    ${InputStyle}\r\n\r\n    font-weight: bold;\r\n`;\r\nconst InputMessage = styled.textarea`\r\n    ${InputStyle}\r\n    font-size: 1rem;\r\n    height: 70%;\r\n    resize: none;\r\n\r\n`;\r\n\r\n// render components\r\nconst Manager = (props) => {\r\n    const onEditField = (key, value) => {\r\n        props.updateNote({\r\n\t\t\t...props.note,\r\n\t\t\t[key]: value,\r\n\t\t\tlastModified: new Date()\r\n\t\t});\r\n    }\r\n    if (!props.note) return <div>Nothing to do</div>;\r\n    return (\r\n        <Editor className=\"manager\" >\r\n            <Title>Edit your note:</Title>\r\n            <InputForm>\r\n                <InputTitle \r\n                    type=\"text\" \r\n                    value={props.note.title} \r\n                    onChange={(e) => onEditField('title', e.target.value)}\r\n                    placeholder=\"Title\" />\r\n                <InputMessage \r\n                    value={props.note.content} \r\n                    onChange={(e) => onEditField('content', e.target.value)}\r\n                    placeholder=\"Write your note here...\"   />  \r\n                <small>{props.note.lastModified.toLocaleString()}</small>\r\n            </InputForm>\r\n            <Button>Review Mode</Button>\r\n        </Editor>\r\n    );\r\n}\r\n\r\nexport default Manager;","import React, { } from 'react';\r\nimport './Editor.css';\r\nimport styled from \"styled-components\";\r\n\r\n// style components\r\nconst Sidebar = styled.div`\r\n    background-color: #454545; \r\n    color: white;\r\n    height: 90%;\r\n    width: 30%;\r\n    padding: 1rem 1.5rem;\r\n    margin-right: 1rem;\r\n    overflow-y: auto;\r\n`;\r\nconst Navbar = styled.div`\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin-bottom: 1rem;\r\n\r\n    ::before {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 2px;\r\n        background-color: black;\r\n        bottom: 0;\r\n        left: 0;\r\n    }\r\n`;\r\nconst NoteList = styled.ul`\r\n\r\n`;\r\nconst Title  = styled.h2`\r\n    font-family: \"Open sans\", sans-serif;\r\n    font-size: 2.3rem;\r\n    font-weight: 700;\r\n    width: 80%;\r\n    color: white;\r\n    \r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n`;    \r\nconst Button = styled.button`\r\n    background-color: transparent;\r\n    border: none;\r\n    font-family: \"Open sans\", sans-serif;\r\n    font-weight: 700;\r\n    color: #59B3F7;\r\n    padding: 0.5rem 1rem;\r\n    width: 100px;\r\n    height: 40px;\r\n    cursor: pointer;\r\n    transition-duration: 0.2s;\r\n\r\n    &:hover {\r\n        transform: translate(-5px);\r\n    }\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n    position: relative;\r\n    list-style-type: none;\r\n    padding: 0.5rem;\r\n    margin-bottom: 1rem; \r\n    border: 2px solid white;\r\n    cursor: pointer;\r\n    width: 100%;\r\n\r\n    &.active {\r\n        background-color: #a19b9a;\r\n    }\r\n    & * {\r\n        margin-bottom: 0.2rem;\r\n    }\r\n    h2 {\r\n        font-size: 1.5rem;\r\n    } \r\n    p {    \r\n        white-space: nowrap;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n    }\r\n`;\r\n\r\nconst RemoveButton = styled(Button)`\r\n    position: absolute;\r\n    color: #e62525;\r\n    top: 0;\r\n    right: 0;\r\n    z-index: 10;\r\n`;\r\n\r\n// render components \r\nconst Editor = (props) => {\r\n\r\n    return (\r\n        <Sidebar className=\"editor\">\r\n            <Navbar>\r\n                <Title>Note List</Title>\r\n                <Button className=\"control-button\" onClick={props.createNote}>Create</Button>\r\n            </Navbar>\r\n            <NoteList className=\"note-container\">\r\n                {props.listNote.map((note) => \r\n                <ListItem className={note.id === props.activeNote ? 'active' : ''}key={note.id.toString()} onClick={() => props.setActiveNote(note.id)}>\r\n                    <Title>{note.title}</Title>\r\n                    <p>{note.content}</p>\r\n                    <small>\r\n                        Last modified: {note.lastModified.toLocaleString('en-GB')}\r\n                    </small>\r\n                    <RemoveButton className=\"control-button\" onClick={() => props.removeNote(note.id)}>Remove</RemoveButton>\r\n                </ListItem>\r\n                )}\r\n            </NoteList>\r\n        </Sidebar>\r\n    );\r\n}\r\n\r\nexport default Editor;","import React, { useState, useEffect } from 'react';\nimport uuid from 'react-uuid';\nimport './App.css';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Manager from './components/Manager/Manager.jsx';\nimport Editor from './components/Editor/Editor.jsx';\n\n\n// styled components\nconst GlobalStyles = createGlobalStyle`\n* {\n\tbox-sizing: border-box;\n\tmargin: 0;\n\tpadding: 0;\n}\n`;\nconst AppContainer = styled.div`\n\tposition: relative;\n\tdisplay: flex;\n\twidth: 100vw;\n\theight: 100vh;\n\tpadding: 2rem;\n`;\n\n// render components\nfunction App() {\n\t// const for creating new note\n\tconst newNote = {\n\t\tid: uuid(),\n\t\ttitle: 'New note',\n\t\tcontent: 'hello',\n\t\tlastModified: new Date()\n\t}\n\n\t// initialize\n\tconst [listNote, setListNote] = useState(\n\t\tlocalStorage.listNote ? JSON.parse(localStorage.listNote) : []);\n\tconst [activeNote, setActiveNote] = useState(false);\n\t// note item event\n\tconst updateNote = (updatedNote) => {\n\t\tconst updatedNoteArray = listNote.map((note) => {\n\t\t\tif (note.id === activeNote) {\n\t\t\t\treturn updatedNote;\n\t\t\t}\n\t\t\treturn note;\n\t\t});\n\t\tconsole.log(updatedNoteArray);\n\t\tupdatedNoteArray.sort((a, b) => b.lastModified - a.lastModified);\n\t\tsetListNote(updatedNoteArray);\n\t};\n\tconst getActiveNote = () => {\n\t\treturn listNote.find((note) => note.id === activeNote);\n\t}\n\n\t// note list events\n\tconst createNote = () => {\n        setListNote([newNote, ...listNote]);\n    };\n    const removeNote = (idToDelete) => {\n        setListNote(listNote.filter((note) => note.id !== idToDelete));\n    };\n\n\t// save to local storage\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"listNote\", JSON.stringify(listNote));\n\t}, [listNote])\n\t// render\n\treturn (\n\t\t<AppContainer>\n\t\t\t<GlobalStyles />\n\t\t\t<Editor\n\t\t\t\tlistNote={listNote}\n\t\t\t\tcreateNote={createNote}\n\t\t\t\tremoveNote={removeNote}\n\t\t\t\tactiveNote={activeNote}\n\t\t\t\tsetActiveNote={setActiveNote}\n\t\t\t/>\n\t\t\t<Manager\n\t\t\t\tnote={getActiveNote()}\n\t\t\t\tupdateNote={updateNote}\n\t\t\t />\n\t\t</AppContainer>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}